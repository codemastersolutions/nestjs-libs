name: Build and Release Libraries

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type (optional - will be auto-detected from commits if not provided)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        lib: ['better-auth'] # Add more libraries here as needed
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get current version
        id: current-version
        run: |
          current_version=$(node -p "require('./libs/${{ matrix.lib }}/package.json').version")
          echo "current-version=$current_version" >> $GITHUB_OUTPUT
          echo "Current version: $current_version"

      - name: Get latest release tag
        id: latest-release
        run: |
          # Get the latest release tag for this library
          latest_tag=$(git tag -l "${{ matrix.lib }}-v*" --sort=-version:refname | head -n 1 || echo "")
          if [ -z "$latest_tag" ]; then
            # If no previous release, use initial commit
            latest_commit=$(git rev-list --max-parents=0 HEAD)
            echo "latest-tag=" >> $GITHUB_OUTPUT
            echo "latest-commit=$latest_commit" >> $GITHUB_OUTPUT
            echo "No previous release found, using initial commit: $latest_commit"
          else
            latest_commit=$(git rev-list -n 1 $latest_tag)
            echo "latest-tag=$latest_tag" >> $GITHUB_OUTPUT
            echo "latest-commit=$latest_commit" >> $GITHUB_OUTPUT
            echo "Latest release tag: $latest_tag (commit: $latest_commit)"
          fi

      - name: Analyze commits and determine version bump
        id: version-bump
        run: |
          # Get commits since last release
          if [ -n "${{ steps.latest-release.outputs.latest-tag }}" ]; then
            commits=$(git log ${{ steps.latest-release.outputs.latest-commit }}..HEAD --oneline --grep="^feat\|^fix\|^BREAKING CHANGE\|^perf\|^refactor\|^docs\|^style\|^test\|^chore" || echo "")
          else
            commits=$(git log --oneline --grep="^feat\|^fix\|^BREAKING CHANGE\|^perf\|^refactor\|^docs\|^style\|^test\|^chore" || echo "")
          fi
          
          echo "Commits since last release:"
          echo "$commits"
          
          # Determine version bump type based on conventional commits
          version_type="${{ github.event.inputs.version_type }}"
          
          if [ "$version_type" = "auto" ] || [ -z "$version_type" ]; then
            # Auto-detect version bump
            if echo "$commits" | grep -q "^[a-f0-9]* \(feat\|BREAKING CHANGE\)"; then
              if echo "$commits" | grep -q "BREAKING CHANGE"; then
                version_type="major"
              else
                version_type="minor"
              fi
            elif echo "$commits" | grep -q "^[a-f0-9]* \(fix\|perf\)"; then
              version_type="patch"
            else
              # Default to patch for other changes
              version_type="patch"
            fi
          fi
          
          echo "version-type=$version_type" >> $GITHUB_OUTPUT
          echo "Determined version bump type: $version_type"

      - name: Bump version
        id: new-version
        run: |
          cd libs/${{ matrix.lib }}
          
          # Bump version using npm version
          new_version=$(npm version ${{ steps.version-bump.outputs.version-type }} --no-git-tag-version)
          new_version=${new_version#v} # Remove 'v' prefix if present
          
          echo "new-version=$new_version" >> $GITHUB_OUTPUT
          echo "New version: $new_version"

      - name: Build library
        run: |
          echo "Building library: ${{ matrix.lib }}"
          pnpm run build:lib ${{ matrix.lib }}

      - name: Run tests
        run: |
          echo "Running tests for library: ${{ matrix.lib }}"
          cd libs/${{ matrix.lib }}
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            pnpm test
          else
            echo "No tests found for ${{ matrix.lib }}, skipping..."
          fi

      - name: Create distribution package
        run: |
          lib_name="${{ matrix.lib }}"
          lib_dir="libs/$lib_name"
          dist_dir="$lib_dir/dist"
          
          echo "Creating distribution package for $lib_name"
          
          # Create dist directory if it doesn't exist
          mkdir -p "$dist_dir"
          
          # Copy package.json
          cp "$lib_dir/package.json" "$dist_dir/"
          
          # Copy README files
          find "$lib_dir" -name "README*.md" -exec cp {} "$dist_dir/" \;
          
          # Copy LICENSE if exists
          if [ -f "$lib_dir/LICENSE" ]; then
            cp "$lib_dir/LICENSE" "$dist_dir/"
          fi
          
          # Create tarball
          cd "$dist_dir"
          npm pack
          
          echo "Distribution package created successfully"

      - name: Generate release notes
        id: release-notes
        run: |
          # Get commits since last release for release notes
          if [ -n "${{ steps.latest-release.outputs.latest-tag }}" ]; then
            commits=$(git log ${{ steps.latest-release.outputs.latest-commit }}..HEAD --pretty=format:"- %s (%h)" --grep="^feat\|^fix\|^BREAKING CHANGE\|^perf\|^refactor" || echo "")
          else
            commits=$(git log --pretty=format:"- %s (%h)" --grep="^feat\|^fix\|^BREAKING CHANGE\|^perf\|^refactor" || echo "")
          fi
          
          if [ -z "$commits" ]; then
            commits="- Miscellaneous improvements and bug fixes"
          fi
          
          # Create release notes
          release_notes="## Changes in v${{ steps.new-version.outputs.new-version }}
          
          $commits
          
          ### Library: ${{ matrix.lib }}
          **Version:** ${{ steps.new-version.outputs.new-version }}
          **Previous Version:** ${{ steps.current-version.outputs.current-version }}
          **Bump Type:** ${{ steps.version-bump.outputs.version-type }}
          
          ---
          *This release was automatically generated based on conventional commits.*"
          
          # Save release notes to file and output
          echo "$release_notes" > release-notes.md
          {
            echo "release-notes<<EOF"
            echo "$release_notes"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add libs/${{ matrix.lib }}/package.json
          git commit -m "chore(${{ matrix.lib }}): bump version to ${{ steps.new-version.outputs.new-version }}" || exit 0

      - name: Create and push tag
        run: |
          tag_name="${{ matrix.lib }}-v${{ steps.new-version.outputs.new-version }}"
          git tag -a "$tag_name" -m "Release ${{ matrix.lib }} v${{ steps.new-version.outputs.new-version }}"
          git push origin "$tag_name"
          git push origin HEAD:main
          echo "Created and pushed tag: $tag_name"

      - name: Check NPM Authentication
        id: npm-auth-check
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "⚠️  NPM_TOKEN not configured in repository secrets"
            echo "📝 To enable NPM publishing, add NPM_TOKEN to repository secrets"
            echo "npm-auth-available=false" >> $GITHUB_OUTPUT
          else
            echo "✅ NPM_TOKEN is configured"
            echo "npm-auth-available=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.npm-auth-check.outputs.npm-auth-available == 'true'
        run: |
          cd libs/${{ matrix.lib }}/dist
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: NPM Publishing Skipped
        if: steps.npm-auth-check.outputs.npm-auth-available == 'false'
        run: |
          echo "🚫 NPM publishing skipped - NPM_TOKEN not configured"
          echo "📦 Package built successfully but not published to NPM"
          echo "🔧 To enable NPM publishing:"
          echo "   1. Generate an NPM access token at https://www.npmjs.com/settings/tokens"
          echo "   2. Add it as NPM_TOKEN in repository secrets"
          echo "   3. Re-run this workflow"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ matrix.lib }}-v${{ steps.new-version.outputs.new-version }}
          name: ${{ matrix.lib }} v${{ steps.new-version.outputs.new-version }}
          body: ${{ steps.release-notes.outputs.release-notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        run: |
          echo "## 🚀 Build and Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Library: ${{ matrix.lib }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version:** ${{ steps.current-version.outputs.current-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ steps.new-version.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Bump Type:** ${{ steps.version-bump.outputs.version-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${{ matrix.lib }}-v${{ steps.new-version.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          
          # NPM Publishing Status
          if [ "${{ steps.npm-auth-check.outputs.npm-auth-available }}" = "true" ]; then
            echo "- **NPM Publishing:** ✅ Published to NPM" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **NPM Publishing:** ⚠️ Skipped (NPM_TOKEN not configured)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 NPM Publishing Setup" >> $GITHUB_STEP_SUMMARY
            echo "To enable NPM publishing, configure NPM_TOKEN in repository secrets." >> $GITHUB_STEP_SUMMARY
            echo "See [NPM_TOKEN Setup Guide](.github/NPM_TOKEN_SETUP.md) for detailed instructions." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Release Notes" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.release-notes.outputs.release-notes }}" >> $GITHUB_STEP_SUMMARY
